{"ast":null,"code":"var _jsxFileName = \"/Users/raysosseh/Documents/projects/festiv/components/FestivBody.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport FestivSearchbar from './FestivSearchbar';\nimport FestivTrackPanel from './FestivTrackPanel';\nimport FestivSidebar from './FestivSidebar';\nimport FestivLoader from './FestivLoader'; //SongKick API key\n\nconst apiKey = \"2LHZxfHghd8t0pPt\"; //List of festivals and their SongKick IDs\n\nconst eventList = {\n  'Afropunk': '33422634',\n  'Montreux Jazz Festival': '33525674',\n  'Dour Festival': '32111594',\n  'Longitude': '32798749',\n  'Life is Beautiful Festival': '33699124',\n  'Rock Werchter': '32066229',\n  'Beauregard Festival': '32081804',\n  'Festival CruÃ¯lla': '31445154',\n  'iHeartRadio Music Festival': '34036934',\n  'Pilgrimage Music & Cultural Festival': '33599254'\n};\n\nclass FestivBody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"receiveMessage\", event => {\n      console.log(event);\n\n      if (event.data) {\n        this.setState({\n          playlistAdded: true\n        });\n        this.addPlaylist(event.data.split('=')[1].split('&')[0]);\n      }\n    });\n\n    _defineProperty(this, \"addPlaylist\", async userToken => {\n      const {\n        festivalName\n      } = this.state;\n      let q = await fetch(\"https://api.spotify.com/v1/me\", {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": \"Bearer \" + userToken\n        }\n      });\n      let user = await q.json();\n      let playlist_name = 'festiv - ' + festivalName + ' Playlist';\n      let e = \"https://api.spotify.com/v1/users/\" + user.id + \"/playlists\"; //create playlist on user's spotify account\n\n      fetch(e, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer \" + userToken,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: playlist_name,\n          public: false\n        }),\n        mode: \"cors\"\n      }).then(async resp => {\n        if (resp.ok) {\n          let playlist = await resp.json();\n          let tracks_string = [];\n          tracks_string = track_holder.map(track => {\n            return 'spotify%3Atrack%3A' + track.id;\n          }); //add tracks to playlist\n\n          let s = \"https://api.spotify.com/v1/playlists/\" + playlist.id + \"/tracks?uris=\" + tracks_string.join(\",\");\n          fetch(s, {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Bearer \" + userToken,\n              \"Content-Type\": \"application/json\"\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"getSpotifyToken\", async () => {\n      let token_json = await fetch(\"https://spotify-token-getter.herokuapp.com/token\");\n      let token = await token_json.json();\n      this.setState({\n        spotifyToken: token.token\n      });\n    });\n\n    _defineProperty(this, \"getFestivalArtists\", async festivalName => {\n      this.setState({\n        isLoading: true,\n        festivalName: festivalName\n      });\n      const artists = [];\n      const eventDataRaw = await fetch(`https://api.songkick.com/api/3.0/events/${eventList[festivalName]}.json?apikey=${apiKey}`);\n      const eventData = await eventDataRaw.json();\n      eventData.resultsPage.results.event.performance.map(performance => {\n        return artists.push(performance.displayName);\n      }); //returning first 100 because of api call max\n\n      this.getSpotifyIds(artists.splice(0, 100));\n    });\n\n    _defineProperty(this, \"getSpotifyIds\", async artists => {\n      const {\n        spotifyToken\n      } = this.state;\n      let spotifyArtistPromises = Promise.all(artists.map(async artist => {\n        artist = artist.split(\" \").join(\"%20\");\n        var query = \"https://api.spotify.com/v1/search?q=\" + artist + \"&type=artist\";\n        let c = await fetch(query, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": \"Bearer \" + spotifyToken\n          }\n        });\n        return await c.json();\n      }));\n      let spotifyAristsData = await spotifyArtistPromises;\n      let spotifyArtistIds = spotifyAristsData.map(res => {\n        if (res.artists.items.length !== 0) {\n          return res.artists.items[0].id;\n        } else {\n          return \"not found\";\n        }\n      });\n      spotifyArtistIds = spotifyArtistIds.filter(idx => {\n        return idx !== \"not found\";\n      });\n      this.getTracks(spotifyArtistIds);\n    });\n\n    _defineProperty(this, \"getTracks\", async ids => {\n      const {\n        spotifyToken\n      } = this.state;\n      let trackPromises = Promise.all(ids.map(async id => {\n        let query = \"https://api.spotify.com/v1/artists/\" + id + \"/top-tracks?country=US\";\n        let c = await fetch(query, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": \"Bearer \" + spotifyToken\n          }\n        });\n        let track = await c.json();\n        return track.tracks[0];\n      }));\n      let trackHolder = await trackPromises;\n      trackHolder = trackHolder.filter(idx => {\n        return idx !== undefined;\n      });\n      this.setState({\n        tracks: trackHolder,\n        playlistAdded: false,\n        isLoading: false\n      });\n    });\n\n    this.state = {\n      festivalName: null,\n      tracks: [],\n      playlistAdded: false,\n      isLoading: false,\n      spotifyToken: null\n    };\n  } //reads user token from break out window\n\n\n  componentDidMount() {\n    window.addEventListener(\"message\", this.receiveMessage, false);\n    this.getSpotifyToken();\n  }\n\n  render() {\n    const {\n      festivalName\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 4\n      }\n    }, __jsx(FestivSearchbar, {\n      getFestivalArtists: this.getFestivalArtists,\n      eventList: eventList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }), __jsx(FestivSidebar, {\n      festivalName: festivalName,\n      playlistAdded: this.state.playlistAdded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }), __jsx(FestivTrackPanel, {\n      tracks: this.state.tracks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }), __jsx(FestivLoader, {\n      isLoading: this.state.isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default FestivBody;","map":{"version":3,"sources":["/Users/raysosseh/Documents/projects/festiv/components/FestivBody.js"],"names":["React","FestivSearchbar","FestivTrackPanel","FestivSidebar","FestivLoader","apiKey","eventList","FestivBody","Component","constructor","props","event","console","log","data","setState","playlistAdded","addPlaylist","split","userToken","festivalName","state","q","fetch","method","headers","user","json","playlist_name","e","id","body","JSON","stringify","name","public","mode","then","resp","ok","playlist","tracks_string","track_holder","map","track","s","join","token_json","token","spotifyToken","isLoading","artists","eventDataRaw","eventData","resultsPage","results","performance","push","displayName","getSpotifyIds","splice","spotifyArtistPromises","Promise","all","artist","query","c","spotifyAristsData","spotifyArtistIds","res","items","length","filter","idx","getTracks","ids","trackPromises","tracks","trackHolder","undefined","componentDidMount","window","addEventListener","receiveMessage","getSpotifyToken","render","getFestivalArtists"],"mappings":"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","sourcesContent":["import React from 'react';\nimport FestivSearchbar from './FestivSearchbar';\nimport FestivTrackPanel from './FestivTrackPanel';\nimport FestivSidebar from './FestivSidebar';\nimport FestivLoader from './FestivLoader';\n\n//SongKick API key\nconst apiKey = \"2LHZxfHghd8t0pPt\";\n\n//List of festivals and their SongKick IDs\nconst eventList = {\n  'Afropunk': '33422634',\n  'Montreux Jazz Festival': '33525674',\n  'Dour Festival': '32111594',\n  'Longitude': '32798749',\n  'Life is Beautiful Festival': '33699124',\n  'Rock Werchter': '32066229',\n  'Beauregard Festival': '32081804',\n  'Festival CruÃ¯lla':'31445154',\n  'iHeartRadio Music Festival': '34036934',\n  'Pilgrimage Music & Cultural Festival': '33599254'\n}\n\nclass FestivBody extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      festivalName: null,\n      tracks: [],\n      playlistAdded: false,\n      isLoading: false,\n      spotifyToken: null\n    }\n  }\n  //reads user token from break out window\n  receiveMessage = (event) => {\n    console.log(event);\n    if(event.data){\n      this.setState({\n        playlistAdded: true\n     })\n     this.addPlaylist(event.data.split('=')[1].split('&')[0])\n    }\n  }\n  addPlaylist = async (userToken) => {\n    const { festivalName } = this.state;\n    let q = await fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Authorization\" : \"Bearer \" + userToken\n      }\n    })\n    let user = await q.json()\n    let playlist_name = 'festiv - '+ festivalName + ' Playlist'\n    let e = \"https://api.spotify.com/v1/users/\"+ user.id +\"/playlists\"\n\n    //create playlist on user's spotify account\n    fetch(e, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\" : \"Bearer \" + userToken,\n        \"Content-Type\" : \"application/json\"\n      },\n      body: JSON.stringify({name: playlist_name, public:false}),\n      mode: \"cors\"\n    }).then( async (resp) => {\n      if(resp.ok){\n        let playlist = await resp.json()\n\n        let tracks_string = []\n        tracks_string = track_holder.map( (track) => {\n          return 'spotify%3Atrack%3A'+track.id\n        })\n\n        //add tracks to playlist\n        let s = \"https://api.spotify.com/v1/playlists/\" + playlist.id + \"/tracks?uris=\" + tracks_string.join(\",\")\n        fetch(s, {\n          method:\"POST\",\n          headers: {\n            \"Authorization\" : \"Bearer \" + userToken,\n            \"Content-Type\" : \"application/json\"\n          }\n        })\n      }\n    })\n  }\n  getSpotifyToken = async () => {\n    let token_json = await fetch(\"https://spotify-token-getter.herokuapp.com/token\")\n    let token = await token_json.json()\n    this.setState({spotifyToken: token.token});\n  }\n  getFestivalArtists = async (festivalName) => {\n    this.setState({isLoading:true, festivalName: festivalName})\n    const artists = [];\n    const eventDataRaw = await fetch(`https://api.songkick.com/api/3.0/events/${eventList[festivalName]}.json?apikey=${apiKey}`);\n    const eventData = await eventDataRaw.json();\n    eventData.resultsPage.results.event.performance.map(performance => {\n      return artists.push(performance.displayName)  \n    });\n    //returning first 100 because of api call max\n    this.getSpotifyIds(artists.splice(0,100))\n  }\n  getSpotifyIds = async (artists) => {\n    const { spotifyToken } = this.state;\n    let spotifyArtistPromises = Promise.all(artists.map(async (artist) => {\n      artist = artist.split(\" \").join(\"%20\")\n      var query = \"https://api.spotify.com/v1/search?q=\" + artist + \"&type=artist\"\n      let c = await fetch(query, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\":\"Bearer \" + spotifyToken \n        }\n      })\n      return await c.json()\n    }));\n    let spotifyAristsData = await spotifyArtistPromises\n    let spotifyArtistIds = spotifyAristsData.map((res) => {\n      if(res.artists.items.length !== 0){\n        return res.artists.items[0].id\n      }\n      else{\n        return \"not found\"\n      }\n    })\n    spotifyArtistIds = spotifyArtistIds.filter((idx) => {return idx !== \"not found\"})\n    this.getTracks(spotifyArtistIds)\n  }\n  getTracks = async (ids) => {\n    const { spotifyToken } = this.state;\n    let trackPromises = Promise.all(ids.map(async (id) => {\n      let query = \"https://api.spotify.com/v1/artists/\"+ id +\"/top-tracks?country=US\"\n      let c = await fetch(query, {\n        method: \"GET\",\n        headers:{\n          \"Authorization\" : \"Bearer \" + spotifyToken\n        }\n      })\n      let track = await c.json()\n      return track.tracks[0]\n    }))\n    let trackHolder  = await trackPromises\n    trackHolder = trackHolder.filter((idx) => {return idx !== undefined})\n    this.setState({\n      tracks:trackHolder,\n      playlistAdded: false,\n      isLoading: false\n    })\n  }\n  componentDidMount(){\n    window.addEventListener(\"message\", this.receiveMessage, false)\n    this.getSpotifyToken();\n  }\n\trender(){\n    const { festivalName } = this.state;\n\t\t\n\t\treturn(\n\t\t\t<div className=\"App\">\n        <FestivSearchbar getFestivalArtists={this.getFestivalArtists} eventList={eventList}/>\n        <FestivSidebar festivalName={festivalName} playlistAdded={this.state.playlistAdded}/>\n        <FestivTrackPanel tracks={this.state.tracks}/>\n        <FestivLoader isLoading={this.state.isLoading}/>\n      </div>\n\t\t)\n\t}\n}\n\nexport default FestivBody;"]},"metadata":{},"sourceType":"module"}