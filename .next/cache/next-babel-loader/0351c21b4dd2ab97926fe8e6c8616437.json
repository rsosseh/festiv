{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/raysosseh/Documents/projects/festiv/components/FestivBody.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport FestivSearchbar from './FestivSearchbar';\nimport FestivTrackPanel from './FestivTrackPanel';\nimport FestivSidebar from './FestivSidebar';\nimport FestivLoader from './FestivLoader'; //SongKick API key\n\nvar apiKey = \"2LHZxfHghd8t0pPt\"; //List of festivals and their SongKick IDs\n\nvar eventList = {\n  'Afropunk': '33422634',\n  'Montreux Jazz Festival': '33525674',\n  'Dour Festival': '32111594',\n  'Longitude': '32798749',\n  'Life is Beautiful Festival': '33699124',\n  'Rock Werchter': '32066229',\n  'Beauregard Festival': '32081804',\n  'Festival CruÃ¯lla': '31445154',\n  'iHeartRadio Music Festival': '34036934',\n  'Pilgrimage Music & Cultural Festival': '33599254'\n};\n\nvar FestivBody = /*#__PURE__*/function (_React$Component) {\n  _inherits(FestivBody, _React$Component);\n\n  var _super = _createSuper(FestivBody);\n\n  function FestivBody(props) {\n    var _this;\n\n    _classCallCheck(this, FestivBody);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"receiveMessage\", function (event) {\n      if (event.data) {\n        _this.setState({\n          playlistAdded: true\n        });\n\n        _this.addPlaylist(event.data);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addPlaylist\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userToken) {\n        var festivalName, q, user, playlist_name, e;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                festivalName = _this.state.festivalName;\n                _context.next = 3;\n                return fetch(\"https://api.spotify.com/v1/me\", {\n                  method: \"GET\",\n                  headers: {\n                    \"Authorization\": \"Bearer \" + userToken\n                  }\n                });\n\n              case 3:\n                q = _context.sent;\n                _context.next = 6;\n                return q.json();\n\n              case 6:\n                user = _context.sent;\n                playlist_name = 'festiv - ' + festivalName + ' Playlist';\n                e = \"https://api.spotify.com/v1/users/\" + user.id + \"/playlists\"; //create playlist on user's spotify account\n                // fetch(e, {\n                //   method: \"POST\",\n                //   headers: {\n                //     \"Authorization\" : \"Bearer \" + userToken,\n                //     \"Content-Type\" : \"application/json\"\n                //   },\n                //   body: JSON.stringify({name: playlist_name, public:false}),\n                //   mode: \"cors\"\n                // }).then( async (resp) => {\n                //   if(resp.ok){\n                //     let playlist = await resp.json()\n                //     let tracks_string = []\n                //     tracks_string = track_holder.map( (track) => {\n                //       return 'spotify%3Atrack%3A'+track.id\n                //     })\n                //     //add tracks to playlist\n                //     let s = \"https://api.spotify.com/v1/playlists/\" + playlist.id + \"/tracks?uris=\" + tracks_string.join(\",\")\n                //     fetch(s, {\n                //       method:\"POST\",\n                //       headers: {\n                //         \"Authorization\" : \"Bearer \" + userToken,\n                //         \"Content-Type\" : \"application/json\"\n                //       }\n                //     })\n                //   }\n                // })\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getSpotifyToken\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var token_json, token;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"https://spotify-token-getter.herokuapp.com/token\");\n\n            case 2:\n              token_json = _context2.sent;\n              _context2.next = 5;\n              return token_json.json();\n\n            case 5:\n              token = _context2.sent;\n\n              _this.setState({\n                spotifyToken: token.token\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getFestivalArtists\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(festivalName) {\n        var artists, eventDataRaw, eventData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this.setState({\n                  isLoading: true,\n                  festivalName: festivalName\n                });\n\n                artists = [];\n                _context3.next = 4;\n                return fetch(\"https://api.songkick.com/api/3.0/events/\".concat(eventList[festivalName], \".json?apikey=\").concat(apiKey));\n\n              case 4:\n                eventDataRaw = _context3.sent;\n                _context3.next = 7;\n                return eventDataRaw.json();\n\n              case 7:\n                eventData = _context3.sent;\n                eventData.resultsPage.results.event.performance.map(function (performance) {\n                  return artists.push(performance.displayName);\n                }); //returning first 100 because of api call max\n\n                _this.getSpotifyIds(artists.splice(0, 100));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getSpotifyIds\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(artists) {\n        var spotifyToken, spotifyArtistPromises, spotifyAristsData, spotifyArtistIds;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                spotifyToken = _this.state.spotifyToken;\n                spotifyArtistPromises = Promise.all(artists.map( /*#__PURE__*/function () {\n                  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(artist) {\n                    var query, c;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            artist = artist.split(\" \").join(\"%20\");\n                            query = \"https://api.spotify.com/v1/search?q=\" + artist + \"&type=artist\";\n                            _context4.next = 4;\n                            return fetch(query, {\n                              method: \"GET\",\n                              headers: {\n                                \"Authorization\": \"Bearer \" + spotifyToken\n                              }\n                            });\n\n                          case 4:\n                            c = _context4.sent;\n                            _context4.next = 7;\n                            return c.json();\n\n                          case 7:\n                            return _context4.abrupt(\"return\", _context4.sent);\n\n                          case 8:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x4) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()));\n                _context5.next = 4;\n                return spotifyArtistPromises;\n\n              case 4:\n                spotifyAristsData = _context5.sent;\n                spotifyArtistIds = spotifyAristsData.map(function (res) {\n                  if (res.artists.items.length !== 0) {\n                    return res.artists.items[0].id;\n                  } else {\n                    return \"not found\";\n                  }\n                });\n                spotifyArtistIds = spotifyArtistIds.filter(function (idx) {\n                  return idx !== \"not found\";\n                });\n\n                _this.getTracks(spotifyArtistIds);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getTracks\", /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(ids) {\n        var spotifyToken, trackPromises, trackHolder;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                spotifyToken = _this.state.spotifyToken;\n                trackPromises = Promise.all(ids.map( /*#__PURE__*/function () {\n                  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n                    var query, c, track;\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            query = \"https://api.spotify.com/v1/artists/\" + id + \"/top-tracks?country=US\";\n                            _context6.next = 3;\n                            return fetch(query, {\n                              method: \"GET\",\n                              headers: {\n                                \"Authorization\": \"Bearer \" + spotifyToken\n                              }\n                            });\n\n                          case 3:\n                            c = _context6.sent;\n                            _context6.next = 6;\n                            return c.json();\n\n                          case 6:\n                            track = _context6.sent;\n                            return _context6.abrupt(\"return\", track.tracks[0]);\n\n                          case 8:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function (_x6) {\n                    return _ref7.apply(this, arguments);\n                  };\n                }()));\n                _context7.next = 4;\n                return trackPromises;\n\n              case 4:\n                trackHolder = _context7.sent;\n                trackHolder = trackHolder.filter(function (idx) {\n                  return idx !== undefined;\n                });\n\n                _this.setState({\n                  tracks: trackHolder,\n                  playlistAdded: false,\n                  isLoading: false\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      festivalName: null,\n      tracks: [],\n      playlistAdded: false,\n      isLoading: false,\n      spotifyToken: null\n    };\n    return _this;\n  } //reads user token from break out window\n\n\n  _createClass(FestivBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"message\", this.receiveMessage, false);\n      this.getSpotifyToken();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var festivalName = this.state.festivalName;\n      return __jsx(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 4\n        }\n      }, __jsx(FestivSearchbar, {\n        getFestivalArtists: this.getFestivalArtists,\n        eventList: eventList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }), __jsx(FestivSidebar, {\n        festivalName: festivalName,\n        playlistAdded: this.state.playlistAdded,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }\n      }), __jsx(FestivTrackPanel, {\n        tracks: this.state.tracks,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }\n      }), __jsx(FestivLoader, {\n        isLoading: this.state.isLoading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return FestivBody;\n}(React.Component);\n\nexport default FestivBody;","map":{"version":3,"sources":["/Users/raysosseh/Documents/projects/festiv/components/FestivBody.js"],"names":["React","FestivSearchbar","FestivTrackPanel","FestivSidebar","FestivLoader","apiKey","eventList","FestivBody","props","event","data","setState","playlistAdded","addPlaylist","userToken","festivalName","state","fetch","method","headers","q","json","user","playlist_name","e","id","token_json","token","spotifyToken","isLoading","artists","eventDataRaw","eventData","resultsPage","results","performance","map","push","displayName","getSpotifyIds","splice","spotifyArtistPromises","Promise","all","artist","split","join","query","c","spotifyAristsData","spotifyArtistIds","res","items","length","filter","idx","getTracks","ids","trackPromises","track","tracks","trackHolder","undefined","window","addEventListener","receiveMessage","getSpotifyToken","getFestivalArtists","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport FestivSearchbar from './FestivSearchbar';\nimport FestivTrackPanel from './FestivTrackPanel';\nimport FestivSidebar from './FestivSidebar';\nimport FestivLoader from './FestivLoader';\n\n//SongKick API key\nconst apiKey = \"2LHZxfHghd8t0pPt\";\n\n//List of festivals and their SongKick IDs\nconst eventList = {\n  'Afropunk': '33422634',\n  'Montreux Jazz Festival': '33525674',\n  'Dour Festival': '32111594',\n  'Longitude': '32798749',\n  'Life is Beautiful Festival': '33699124',\n  'Rock Werchter': '32066229',\n  'Beauregard Festival': '32081804',\n  'Festival CruÃ¯lla':'31445154',\n  'iHeartRadio Music Festival': '34036934',\n  'Pilgrimage Music & Cultural Festival': '33599254'\n}\n\nclass FestivBody extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      festivalName: null,\n      tracks: [],\n      playlistAdded: false,\n      isLoading: false,\n      spotifyToken: null\n    }\n  }\n  //reads user token from break out window\n  receiveMessage = (event) => {\n    if(event.data){\n      this.setState({\n        playlistAdded: true\n     })\n     this.addPlaylist(event.data)\n    }\n  }\n  addPlaylist = async (userToken) => {\n    const { festivalName } = this.state;\n    let q = await fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Authorization\" : \"Bearer \" + userToken\n      }\n    })\n    let user = await q.json()\n    let playlist_name = 'festiv - '+ festivalName + ' Playlist'\n    let e = \"https://api.spotify.com/v1/users/\"+ user.id +\"/playlists\"\n\n    //create playlist on user's spotify account\n    // fetch(e, {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Authorization\" : \"Bearer \" + userToken,\n    //     \"Content-Type\" : \"application/json\"\n    //   },\n    //   body: JSON.stringify({name: playlist_name, public:false}),\n    //   mode: \"cors\"\n    // }).then( async (resp) => {\n    //   if(resp.ok){\n    //     let playlist = await resp.json()\n\n    //     let tracks_string = []\n    //     tracks_string = track_holder.map( (track) => {\n    //       return 'spotify%3Atrack%3A'+track.id\n    //     })\n\n    //     //add tracks to playlist\n    //     let s = \"https://api.spotify.com/v1/playlists/\" + playlist.id + \"/tracks?uris=\" + tracks_string.join(\",\")\n    //     fetch(s, {\n    //       method:\"POST\",\n    //       headers: {\n    //         \"Authorization\" : \"Bearer \" + userToken,\n    //         \"Content-Type\" : \"application/json\"\n    //       }\n    //     })\n    //   }\n    // })\n  }\n  getSpotifyToken = async () => {\n    let token_json = await fetch(\"https://spotify-token-getter.herokuapp.com/token\")\n    let token = await token_json.json()\n    this.setState({spotifyToken: token.token});\n  }\n  getFestivalArtists = async (festivalName) => {\n    this.setState({isLoading:true, festivalName: festivalName})\n    const artists = [];\n    const eventDataRaw = await fetch(`https://api.songkick.com/api/3.0/events/${eventList[festivalName]}.json?apikey=${apiKey}`);\n    const eventData = await eventDataRaw.json();\n    eventData.resultsPage.results.event.performance.map(performance => {\n      return artists.push(performance.displayName)  \n    });\n    //returning first 100 because of api call max\n    this.getSpotifyIds(artists.splice(0,100))\n  }\n  getSpotifyIds = async (artists) => {\n    const { spotifyToken } = this.state;\n    let spotifyArtistPromises = Promise.all(artists.map(async (artist) => {\n      artist = artist.split(\" \").join(\"%20\")\n      var query = \"https://api.spotify.com/v1/search?q=\" + artist + \"&type=artist\"\n      let c = await fetch(query, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\":\"Bearer \" + spotifyToken \n        }\n      })\n      return await c.json()\n    }));\n    let spotifyAristsData = await spotifyArtistPromises\n    let spotifyArtistIds = spotifyAristsData.map((res) => {\n      if(res.artists.items.length !== 0){\n        return res.artists.items[0].id\n      }\n      else{\n        return \"not found\"\n      }\n    })\n    spotifyArtistIds = spotifyArtistIds.filter((idx) => {return idx !== \"not found\"})\n    this.getTracks(spotifyArtistIds)\n  }\n  getTracks = async (ids) => {\n    const { spotifyToken } = this.state;\n    let trackPromises = Promise.all(ids.map(async (id) => {\n      let query = \"https://api.spotify.com/v1/artists/\"+ id +\"/top-tracks?country=US\"\n      let c = await fetch(query, {\n        method: \"GET\",\n        headers:{\n          \"Authorization\" : \"Bearer \" + spotifyToken\n        }\n      })\n      let track = await c.json()\n      return track.tracks[0]\n    }))\n    let trackHolder  = await trackPromises\n    trackHolder = trackHolder.filter((idx) => {return idx !== undefined})\n    this.setState({\n      tracks:trackHolder,\n      playlistAdded: false,\n      isLoading: false\n    })\n  }\n  componentDidMount(){\n    window.addEventListener(\"message\", this.receiveMessage, false)\n    this.getSpotifyToken();\n  }\n\trender(){\n    const { festivalName } = this.state;\n\t\t\n\t\treturn(\n\t\t\t<div className=\"App\">\n        <FestivSearchbar getFestivalArtists={this.getFestivalArtists} eventList={eventList}/>\n        <FestivSidebar festivalName={festivalName} playlistAdded={this.state.playlistAdded}/>\n        <FestivTrackPanel tracks={this.state.tracks}/>\n        <FestivLoader isLoading={this.state.isLoading}/>\n      </div>\n\t\t)\n\t}\n}\n\nexport default FestivBody;"]},"metadata":{},"sourceType":"module"}